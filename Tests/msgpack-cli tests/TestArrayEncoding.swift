//
//  TestArrayEncoding.swift
//  MsgpackSerializationTests iOS
//
//  Created by cherrywoods on 22.02.18.
//
//  These tests are similar to Tests from msgpack-cli
//  The expected msgpack values were partially generated by msgpack-tools
//  (https://github.com/ludocode/msgpack-tools)
//

import XCTest
@testable import MsgpackSerialization

class ArrayEncoding: XCTestCase {
    
    func testFixArrayFormat() {
        
        TestUtilites.testRoundTrip(of: ArrayWrapper(Array<Int>(arrayLiteral: 42)),
                                   expected: [0x91, 0x2a])
        TestUtilites.testRoundTrip(of: ArrayWrapper(["a", "b", "c", "d"]),
                                   expected: [0x94, 0xa1, 0x61, 0xa1, 0x62, 0xa1, 0x63, 0xa1,0x64])
        
    }
    
    func testArray16Format() {
        
        // from now on just test for the right length of the msgpack data
        let tenThousandElements = Array<Int>(repeating: 0xC0FFEE, count: 10_000)
        // the expected length is 3 (header + length) + 50_000 (C0FFEE needs 4 bytes, plus header byte)
        TestUtilites.testRoundTrip(of: ArrayWrapper(tenThousandElements), expectedLength: 50_003)
        
    }
    
    func testArray32Format() {
        
        let manyManyElements = Array<Int>(repeating: -5, count: 70_000)
        // the expected length is 5 (header + length) + 70_000 (because 0 needs just one byte)
        TestUtilites.testRoundTrip(of: ArrayWrapper(manyManyElements), expectedLength: 70_005)
        
    }
    
    fileprivate struct ArrayWrapper<T>: Codable, Equatable where T: Equatable {
        
        let value: [T]
        
        init(_ value: [T]) {
            self.value = value
        }
        
        init(from decoder: Decoder) throws {
            self.value = try decoder.singleValueContainer().decode([T].self)
        }
        
        func encode(to encoder: Encoder) throws {
            var sVC = encoder.singleValueContainer()
            try sVC.encode(value)
        }
        
        static func ==(lhs: ArrayEncoding.ArrayWrapper<T>, rhs: ArrayEncoding.ArrayWrapper<T>) -> Bool {
            return lhs.value == rhs.value
        }
        
    }
    
}
